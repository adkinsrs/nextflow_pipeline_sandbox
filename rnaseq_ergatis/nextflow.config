// Needs to be named 'nextflow.config' to automatically be found
// Otherwise pass to CLI (nextflow -c <path_to_config> run <script>)

// To use a specific version of Java run `export NXF_JAVA_HOME=/usr/local/packages/jdk-18` before running Nextflow command
// Unset the following env variables in the shell before running Nextflow
"unset module; unset _module_raw; unset switchml; unset ml"

// Source - http://ergatis.igs.umaryland.edu//cgi/view_pipeline.cgi?instance=/local/projects/RNASEQ/Projects_starting_Jan2022/XNLON/rnaseq/ergatis//workflow/runtime/pipeline/13365834737/pipeline.xml

// Specify work directory. Otherwise it is in the current directory.  (alternatively could pass -w <dir> in command line)
workDir = "/path/to/workdir"

manifest {
    description = "Workflow for a basic RNA-Seq run typically run on the Ergatis platform"
    mainScript = "main.nf"
    name = "RNA-Seq"
    version = "0.1"
}

env {
    SGE_CELL="cell01"
    SGE_CLUSTER_NAME="cell01"
    SGE_ROOT="/usr/local/packages/sge-root"
}

// https://www.nextflow.io/docs/latest/config.html#process-selectors
process {
    queue = 'workflow.q'
    // Do not add "-b y" as cmd needs to be treated as a script
    clusterOptions = "-V -P test"


}

params {
    // Reference fasta file
    ref_fasta_file = "ref_file"
    // two lists of paired reads files
    list_file1 = "first_mates.lst"
    list_file2 = "second_mates.lst"

    // Where rnaseq scripts are housed
    bin_dir = "/path/to/rnaseq/scripts"

    //path to HISAT2 package binary directory
    hisat2_bin_dir = "/usr/local/bin/"
    //path to samtools package binary directory
    samtools_bin_dir = "/usr/local/bin/"
    //path to fastqc package binary directory
    fastq_bin_dir = "/usr/local/bin"
}

// Invoked when workflow execution is completed
// Must be assigned (see https://www.nextflow.io/docs/latest/metadata.html#decoupling-metadata)
workflow.onComplete = {
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}

// Invoked when runtime or process error causes execution to stop
/*workflow.onError = {
    if (${workflow.errorMessage}) {
        println "Oops... Pipeline execution stopped with the following message: ${workflow.errorMessage}"
    }
}*/

